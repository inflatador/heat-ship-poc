heat_template_version: 2015-10-15

description: |
   #### Creates:
   #### - Cloud Network
   #### - 3 Linux Servers in the same provisioning zone
   #### - 1 Shared IPv4 on PublicNet
   #### - Shared IP on Cloud Network
   #### - HA Redis using Pacemaker
   #### Author: Brian King
   #### Contributor: Tony Garcia
   #### License: Apache
   #### version: 0.0.2a
   #### last modified: 2019-10-05

   #### builds using localhost as the playbook
   #### thus, there must be a separate role for
   #### cluster master and cluster nodes


parameter_groups:

- label: Server Settings
  parameters:
    - nodeName
    - nodeImage
    - nodeFlavor

- label: Network Settings
  parameters:
    - netRange
    - netName

parameters:

#begin Server instance params

  nodeName:
    type: string
    label: 'Prefix for Cluster Instances'
    default: 'clusNode'
    constraints:
      - allowed_pattern: '^[\w-]+$'
        description: "Server name may only have alphanumeric characters, underscores, and dashes"

  nodeImage:
    type: string
    default: "CentOS 7 (PVHVM)"
    label: Cloud Server image
    constraints:
      - custom_constraint: glance.image

  nodeFlavor:
    type: string
    default: 1 GB General Purpose v1
    label: Server Instance Flavor Name or ID (such as 4 GB General Purpose v1)
    description: Must be a valid Rackspace Cloud Flavor
    constraints:
    - allowed_values:
      - 1 GB General Purpose v1
      - 2 GB General Purpose v1
      - 4 GB General Purpose v1
      - 8 GB General Purpose v1
      - 15 GB I/O
      - 30 GB I/O
      description: must be a valid Rackspace Cloud Server flavor.


#begin network params

  netName:
    type: string
    label: 'Cloud Network Name'
    description: Name of Cloud Network
    default: 'clusNet01'
    constraints:
      - allowed_pattern: '^[\w-]+$'
        description: "Network name may only have alphanumeric characters, underscores, and dashes"

  netRange:
    type: string
    label: 'Enter the first 3 octets of desired network range (such as 192.168.100). /24 network will be created'
    description: '/24 network will be created'
    default: '172.19.241'
    constraints:
      - allowed_pattern: '^(?:(?:^|\.)(?:2(?:5[0-5]|[0-4]\d)|1?\d?\d)){3}$'
        description: "please enter a valid 3 octets"


resources:
#begin network resources
  cloudNet:
    type: OS::Neutron::Net
    properties:
      name: { get_param: [netName] }

  cloudNetSubnet:
    type: OS::Neutron::Subnet
    properties:
      name: { get_param: [netName] }
      network: { get_attr: [cloudNet, name] }
      ip_version: 4
      cidr: { list_join: ['.',  [ { get_param: netRange }, '0/24' ]] }
      allocation_pools: [{'end': { list_join: ['.',  [ { get_param: netRange }, '254' ]] }, 'start': { list_join: ['.',  [ { get_param: netRange }, '9' ]] } }]

  cloudNetmasterNodeNonHAPort:
    type: OS::Neutron::Port
    properties:
      fixed_ips: [{'subnet_id': { get_attr: [cloudNetSubnet, name] }, 'ip_address': { list_join: ['.',  [ { get_param: netRange }, '2' ]]  } }]
      name: { get_param: [netName] }
      network: { get_attr: [cloudNet, name] }

  cloudNetnodeInstance02NonHAPort:
    type: OS::Neutron::Port
    properties:
      fixed_ips: [{'subnet_id': { get_attr: [cloudNetSubnet, name] }, 'ip_address': { list_join: ['.',  [ { get_param: netRange }, '3' ]] } }]
      name: { get_param: [ netName ] }
      network: { get_attr: [cloudNet, name] }

  cloudNetnodeInstance03NonHAPort:
    type: OS::Neutron::Port
    properties:
      fixed_ips: [{'subnet_id': { get_attr: [cloudNetSubnet, name] }, 'ip_address': { list_join: ['.',  [ { get_param: netRange }, '4' ]] } }]
      name: { get_param: [netName] }
      network: { get_attr: [cloudNet, name] }

  cloudNetSharedIP:
    type: Rackspace::Cloud::SharedIP
    properties:
      ip_address: { list_join: ['.',  [ { get_param: netRange }, '1' ]]  }
      network_id: { get_attr: [cloudNetSubnet, network_id] }
      ports: [{ get_resource: cloudNetmasterNodeNonHAPort }, { get_resource: cloudNetnodeInstance02NonHAPort }, { get_resource: cloudNetnodeInstance03NonHAPort } ]

  cloudNetSharedIPAssociation:
    type: Rackspace::Cloud::AssociateSharedIP
    properties:
      shared_ip:  { get_attr: [ cloudNetSharedIP, shared_ip_address, ip_address, id ]}
      servers: [{ get_resource: masterNode}, {get_resource: nodeInstance02 }, {get_resource: nodeInstance03 }]

  publicNetSharedIP:
    type: Rackspace::Cloud::SharedIP
    properties:
      network_id: 00000000-0000-0000-0000-000000000000
      ports: [{ get_attr: [ masterNode, addresses, public, 0, port ] }, { get_attr: [ nodeInstance02, addresses, public, 0, port ] }, { get_attr: [ nodeInstance03, addresses, public, 0, port ] }]

  publicNetSharedIPAssociation:
    type: Rackspace::Cloud::AssociateSharedIP
    properties:
      shared_ip:  { get_attr: [ publicNetSharedIP, shared_ip_address, ip_address, id ]}
      servers: [{ get_resource: masterNode}, {get_resource: nodeInstance02 }, {get_resource: nodeInstance03 }]

#Begin generic server resources


  stackSSHKey:
    type: OS::Nova::KeyPair
    properties:
      name: { get_param: "OS::stack_name" }
      save_private_key: true

#Begin Server instance resources

  nodePass:
    type: OS::Heat::RandomString

  clusPass:
    type: OS::Heat::RandomString

  clusConfig:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        groups:
          - wheel
          - haclient
        users:
          - name: rack
            groups: wheel
            lock_passwd: false
            passwd: $6$8nlsOUQi$gUDvoEISDgxnIzvHBkHHBDa1t1sHoipPz.G5bm3dHTx.wTaNYInoLItOa52CLfrvisiajgm3b9YmDT88X2G2d1
            ssh-authorized-keys:
            - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC5gfj8TCFHH7Ax8DlNA92TfAXmT0M1w0y2cECM/tBm8GMN0Vha9/L3qe8khJWAed88n2Aiap0QLZu5EPzOgjt8HKmFNAdZq/sRMi4uSiQExA6YcLXTzgDrDtoMPGekzD0k0J1vB/tm5MSTx+8J9tRYMXV/sfjhUqSRIFRhAMjOLTjR+l8rat9TMUPDctqOXss9VH8IH4HVIKRbva4hkF1gyceOmI/UL2M8plTJwPAwBfFjjG+lvL652ZrUv/501XUlqROKU/3NUQCzI7iyAJsnh23J85yqAXRwjCHLf1oMpK35awAfK0jWGwHkgIfAjcKBVMzzX8sI4C5VpPGnyehr bria4081@MQ90XMG8WL
          - name: hacluster
            groups: haclient
            lock_passwd: false
            plain_text_passwd: { get_attr: [ clusPass, value ]}

        write_files:
          - path: /etc/sudoers.d/10-rack
            content: |
              rack ALL=(ALL) NOPASSWD:ALL
            permissions:
             '0600'

  downloadAnsibleRoles:
      type: OS::Heat::SoftwareConfig
      properties:
        group: script
        outputs:
        - name: results
        config:
          str_replace:
            template: |
              #!/bin/bash
              set -e
              easy_install pip
              pip install ansible
              mkdir -p /etc/ansible/roles
              wget ansible_source -O /tmp/ansible-roles.tar.gz 2>&1
              tar -xf /tmp/ansible-roles.tar.gz --strip-components=1 -C /etc/ansible/roles
            params:
              ansible_source: http://catalog.rs-heat.com/ansible-roles/ansible-roles.tar.gz

  setupHosts:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      outputs:
      - name: hosts
      config:
        str_replace:
          template: |
                     #!/bin/bash
                     cat > /tmp/hosts << EOF
                     $entry01
                     $entry02
                     $entry03
                     EOF
                     cat /tmp/hosts >> /etc/hosts
          params:
            $entry01:
              list_join:
                - ' '
                - - { get_attr: [ cloudNetmasterNodeNonHAPort, fixed_ips, 0, ip_address ]}
                - - str_replace:
                      template: $node01
                      params:
                        $node: { get_param: nodeName }
            $entry02:
              list_join:
                - ' '
                - - { get_attr: [ cloudNetnodeInstance02NonHAPort, fixed_ips, 0, ip_address ]}
                - - str_replace:
                      template: $node02
                      params:
                        $node: { get_param: nodeName }
            $entry03:
              list_join:
                - ' '
                - - { get_attr: [ cloudNetnodeInstance03NonHAPort, fixed_ips, 0, ip_address ]}
                - - str_replace:
                      template: $node03
                      params:
                        $node: { get_param: nodeName }

  clusterNodeCloudInit:
    type: OS::Heat::MultipartMime
    properties:
      parts:
      - config: { get_resource: clusConfig }
      - config: { get_resource: downloadAnsibleRoles }
      - config: { get_resource: setupHosts }


  masterNode:
    type: OS::Nova::Server
    properties:
      name:
        str_replace:
          template: $node01
          params:
              $node: { get_param: nodeName }
      image: { get_param: nodeImage }
      admin_pass: { get_attr: [ nodePass, value ]}
      key_name: { get_resource: stackSSHKey }
      flavor: { get_param: nodeFlavor }
      config_drive: True
      user_data: { get_resource: clusterNodeCloudInit }
      metadata:
        created_by: cn_orch_template
      networks:
        - network: '00000000-0000-0000-0000-000000000000'
        - network: '11111111-1111-1111-1111-111111111111'
        - port: { get_resource: cloudNetmasterNodeNonHAPort }

  nodeInstance02:
    type: OS::Nova::Server
    properties:
      name:
        str_replace:
          template: $node02
          params:
              $node: { get_param: nodeName }
      image: { get_param: nodeImage }
      admin_pass: { get_attr: [ nodePass, value ]}
      key_name: { get_resource: stackSSHKey }
      flavor: { get_param: nodeFlavor }
      config_drive: True
      metadata:
        created_by: cn_orch_template
      user_data: { get_resource: clusterNodeCloudInit }
      networks:
        - network: '00000000-0000-0000-0000-000000000000'
        - network: '11111111-1111-1111-1111-111111111111'
        - port: { get_resource: cloudNetnodeInstance02NonHAPort }

  nodeInstance03:
    type: OS::Nova::Server
    properties:
      name:
        str_replace:
          template: $node03
          params:
              $node: { get_param: nodeName }
      image: { get_param: nodeImage }
      admin_pass: { get_attr: [ nodePass, value ]}
      key_name: { get_resource: stackSSHKey }
      flavor: { get_param: nodeFlavor }
      config_drive: True
      user_data: { get_resource: clusterNodeCloudInit }
      metadata:
        created_by: cn_orch_template
      networks:
        - network: '00000000-0000-0000-0000-000000000000'
        - network: '11111111-1111-1111-1111-111111111111'
        - port: { get_resource: cloudNetnodeInstance03NonHAPort }


outputs:
  cloudNetworkName:
    value: { get_attr: [cloudNet, name] }
    description: 'Cloud Network name'

  cloudNetworkRange:
    value: { get_attr: [cloudNetSubnet, cidr] }
    description: 'Cloud Network range'

  sharedPublicIPv4Display:
    value: { get_attr: [ publicNetSharedIP, shared_ip_address, ip_address ]}
    description: "Shared Public IPv4"

  node01PublicIPs:
      value: { get_attr: [masterNode, networks, public] }
      description: 'Public IPs of Server Instance 01'

  node02PublicIPs:
      value: { get_attr: [nodeInstance02, networks, public] }
      description: 'Public IPs of Server Instance 02'

  node03PublicIPs:
      value: { get_attr: [nodeInstance03, networks, public] }
      description: 'Public IPs of Server Instance 03'

  node02PrivateIP:
      value:
        list_join: ['.',  [ { get_param: netRange }, '3' ]]
      description: 'PrivateIP of node02'


  nodePassDisplay:
    value: { get_attr: [nodePass, value ] }
    description: 'Admin Password of Server Instances'

  clusPassDisplay:
    value: { get_attr: [clusPass, value ] }
    description: 'cluster password'

  stackPrivateSSHKey:
    value: { get_attr: ['stackSSHKey', 'private_key'] }
    description: 'private Key for accessing Server Instance'
